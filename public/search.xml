<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Jenkins如何自动化部署前端项目(安装Jenkins)</title>
    <url>/2023/08/01/jenkins/</url>
    <content><![CDATA[<h3 id="Jenkins如何自动化部署前端项目"><a href="#Jenkins如何自动化部署前端项目" class="headerlink" title="Jenkins如何自动化部署前端项目"></a>Jenkins如何自动化部署前端项目</h3><h4 id="1、安装JDK-11-这里我们通过yum-系统Centos-8-4-64"><a href="#1、安装JDK-11-这里我们通过yum-系统Centos-8-4-64" class="headerlink" title="1、安装JDK 11 这里我们通过yum 系统Centos 8.4.64"></a>1、安装JDK 11 这里我们通过yum 系统Centos 8.4.64</h4><ol>
<li>首先，确保你的系统已经更新到最新的软件包列表。可以运行以下命令来更新软件包列表：</li>
</ol>
<figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">sudo yum update<br></code></pre></td></tr></table></figure>

<h6 id="安装JDK-11"><a href="#安装JDK-11" class="headerlink" title="安装JDK 11"></a>安装JDK 11</h6><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">sudo yum install java-<span class="hljs-number">11</span>-openjdk-devel<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>安装过程中，系统会提示你确认是否继续安装。输入<code>Y</code>并按下Enter键，然后等待安装完成。</li>
<li>安装完成后，可以使用以下命令来验证JDK 11的安装：</li>
</ol>
<h6 id="验证Java是否安装成功"><a href="#验证Java是否安装成功" class="headerlink" title="验证Java是否安装成功"></a>验证Java是否安装成功</h6><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">java -version<br></code></pre></td></tr></table></figure>

<p>输出应该显示类似以下内容：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">openjdk version &quot;<span class="hljs-number">11</span>.x.x&quot; <span class="hljs-number">2021</span>-XX-XX<br>OpenJDK Runtime Environment (build <span class="hljs-number">11</span>.x.x+XX-XXXX)<br>OpenJDK <span class="hljs-number">64</span>-Bit Server VM (build <span class="hljs-number">11</span>.x.x+XX-XXXX, mixed <span class="hljs-built_in">mode</span>, sharing)<br></code></pre></td></tr></table></figure>

<h6 id="卸载Jdk"><a href="#卸载Jdk" class="headerlink" title="卸载Jdk"></a>卸载Jdk</h6><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd"># 查看CentOS自带JDK是否已安装:<br>yum list installed | grep java<br># 如果存在自带的jdk，删除自带的jdk<br>yum -y remove java-<span class="hljs-number">1</span>.<span class="hljs-number">8</span>.<span class="hljs-number">0</span>-openjdk*<br>yum -y remove tzdata-java.noarch<br></code></pre></td></tr></table></figure>

<h4 id="2、安装Jenkins"><a href="#2、安装Jenkins" class="headerlink" title="2、安装Jenkins"></a>2、安装Jenkins</h4><p>首先，添加Jenkins的官方软件包源。打开终端窗口，并使用以下命令导入Jenkins的GPG密钥：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">sudo wget -O /etc/yum.repos.d/jenkins.repo \<br><span class="hljs-function">    https://<span class="hljs-title">pkg.jenkins.io</span>/<span class="hljs-title">redhat</span>/<span class="hljs-title">jenkins.repo</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">sudo</span> <span class="hljs-title">rpm</span> --<span class="hljs-title">import</span> <span class="hljs-title">https</span>://<span class="hljs-title">pkg.jenkins.io</span>/<span class="hljs-title">redhat</span>/<span class="hljs-title">jenkins.io</span>-2023.<span class="hljs-title">key</span></span><br></code></pre></td></tr></table></figure>

<p>然后安装  安装过程中，系统会提示你确认是否继续安装。输入<code>Y</code>并按下Enter键，然后等待安装完成</p>
<p><code>sudo yum install jenkins</code></p>
<h6 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h6><p>您可以使用以下命令启动 Jenkins 服务：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">sudo systemctl <span class="hljs-built_in">start</span> jenkins<br></code></pre></td></tr></table></figure>

<h6 id="您可以使用以下命令检查-Jenkins-服务的状态："><a href="#您可以使用以下命令检查-Jenkins-服务的状态：" class="headerlink" title="您可以使用以下命令检查 Jenkins 服务的状态："></a>您可以使用以下命令检查 Jenkins 服务的状态：</h6><p><code>sudo systemctl status jenkins</code></p>
<p>如下：</p>
<p><img src="/img/demo.png" alt="图"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins如何自动化部署前端项目(2)</title>
    <url>/2023/08/01/jenkins2/</url>
    <content><![CDATA[<h3 id="Jenkins如何自动化部署前端项目"><a href="#Jenkins如何自动化部署前端项目" class="headerlink" title="Jenkins如何自动化部署前端项目"></a>Jenkins如何自动化部署前端项目</h3><p>前置步骤我们都操作完了，这篇开始介绍jenkins的是哟。话不多说，看操作(没安装的请看我主页有详细的安装教程)</p>
<p>1、登录进入jenkins后会让你选择安装插件，选择第一个默认的就行。</p>
<p>2、配置JDK和Git都需要执行路径，所以需要先把执行路径找到，先进入服务器的终端界面执行</p>
<blockquote>
<p>JDK的路径</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">echo $JAVA_HOME<br></code></pre></td></tr></table></figure>

<p>如果是空记得先去设置java的环境变量 <code>which java</code> 查看java的安装路径</p>
<p><img src="/img/j/1.png" alt="jdk路径"></p>
<blockquote>
<p>Git的路径</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">which git<br></code></pre></td></tr></table></figure>

<p><img src="/img/j/2.png" alt="git路径"></p>
<p>3、先配置JDK和Git。点击：Manage Jenkins&gt;&gt;Global Tool Configuration</p>
<p><img src="/img/j/3.png"></p>
<p><img src="/img/j/4.png"></p>
<p>选择JDK，别名随便填，JAVA_HOME填写查询到jdk的路径</p>
<p><img src="/img/j/5.png"></p>
<p>选择Git，Name随便填e填写2.2查询到git的路径，配置完成后点击应用，在点击保存。</p>
<p><img src="/img/j/6.png"></p>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>安装插件，点击Manage Jenkins&gt;&gt;Manage Plugins，点击可选插件</p>
<p><img src="/img/j/7.png"></p>
<p><img src="/img/j/8.png"></p>
<p>安装 Gitee 插件，找到可选插件tab，搜索gitee<br><img src="/img/j/9.png"></p>
<p>安装 Maven 插件<br><img src="/img/j/10.png"></p>
<p>安装 Git Parameter Plug-In 插件，用于添加git参数<br><img src="/img/j/11.png"></p>
<p>安装 Environment Injector 插件，搜索 inject，此插件可以在shell脚本中可以使用 $a、$b等自定义环境变量<br><img src="/img/j/12.png"></p>
<p>安装 Publish over SSH 插件<br><img src="/img/j/13.png"></p>
<h4 id="必须要配置name和email，为了让每一次提交的代码都能配置到用户"><a href="#必须要配置name和email，为了让每一次提交的代码都能配置到用户" class="headerlink" title="必须要配置name和email，为了让每一次提交的代码都能配置到用户"></a>必须要配置name和email，为了让每一次提交的代码都能配置到用户</h4><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">git config --global user.name &quot;jenkins_git&quot;<br>git config --global user.email &quot;wuqi_y@<span class="hljs-number">163</span>.com&quot;<br></code></pre></td></tr></table></figure>

<p>生成证书 绑定gitee或者github</p>
<h2 id="SSH公钥"><a href="#SSH公钥" class="headerlink" title="SSH公钥"></a>SSH公钥</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># 生成ssh连接所需的证书<br>ssh-keygen -t rsa -C &quot;wuqi_y@163.com&quot;<br></code></pre></td></tr></table></figure>

<h3 id="将证书配置到git上。"><a href="#将证书配置到git上。" class="headerlink" title="将证书配置到git上。"></a>将证书配置到git上。</h3><p>  登录github或gitee，这里我以gitee为例，步骤如下：<br>  登录并进入gitee个人设置 – 点击“SSH公钥”侧边栏 – 输入标题 – 黏贴刚才在linux上生成id_rsa.pub文件内容后保存。</p>
<h3 id="添加Gitee配置（Manage-Jenkins-Configure-System-Gitee-配置）"><a href="#添加Gitee配置（Manage-Jenkins-Configure-System-Gitee-配置）" class="headerlink" title="添加Gitee配置（Manage Jenkins&gt;&gt;Configure System&gt;&gt;Gitee 配置）"></a>添加Gitee配置（Manage Jenkins&gt;&gt;Configure System&gt;&gt;Gitee 配置）</h3><p><img src="/img/j/14.png"></p>
<p><img src="/img/j/15.png"></p>
<p><img src="/img/j/16.png"></p>
<p><img src="/img/j/17.png"><br><img src="/img/j/18.png"><br><img src="/img/j/19.png"><br><img src="/img/j/20.png"><br><img src="/img/j/21.png"><br>可根据自己需要更改(记得安装Node哦)</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd"># 在执行过程中若遇到使用了未定义的变量或命令返回值为非零，将直接报错退出<br><span class="hljs-built_in">set</span> -eu<br><span class="hljs-built_in">echo</span> &quot;&lt;--------------------------------------&gt;&quot;<br>node -v<br><span class="hljs-built_in">echo</span> &quot;安装依赖&quot;<br>npm install<br><br><span class="hljs-built_in">echo</span> &quot;&lt;--------------------------------------&gt;&quot;<br><span class="hljs-built_in">echo</span> &quot;打包出dist文件夹&quot;<br>npm run build<br><br># 先删除nginx下的旧数据<br>sudo rm -rf /www/wwwroot/test-jenks/*<br># 再将新数据拷贝到nginx下<br>sudo cp -r dist/* /www/wwwroot/test-jenks/<br></code></pre></td></tr></table></figure>

<p>最后执行即可<br><img src="/img/j/22.png"></p>
]]></content>
      <tags>
        <tag>运维</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>关于微信前端支付在微信环境如何支付</title>
    <url>/2023/08/03/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/</url>
    <content><![CDATA[<h3 id="关于微信前端支付在微信环境如何支付"><a href="#关于微信前端支付在微信环境如何支付" class="headerlink" title="关于微信前端支付在微信环境如何支付"></a>关于微信前端支付在微信环境如何支付</h3><p>我们都知道在微信环境中是无法直接使用H5支付的，需要调取微信浏览器一些相关API去唤醒支付,相关链接如下：</p>
<p><a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_7&index=6">https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_7&amp;index&#x3D;6</a></p>
<p><strong>注意：WeixinJSBridge内置对象在其他浏览器中无效。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">onBridgeReady</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-title class_">WeixinJSBridge</span>.<span class="hljs-title function_">invoke</span>(<br>     <span class="hljs-string">&#x27;getBrandWCPayRequest&#x27;</span>, &#123;<br>        <span class="hljs-string">&quot;appId&quot;</span>:<span class="hljs-string">&quot;wx2421b1c4370ec43b&quot;</span>,     <span class="hljs-comment">//公众号ID，由商户传入   </span><br>        <span class="hljs-string">&quot;timeStamp&quot;</span>:<span class="hljs-string">&quot;1395712654&quot;</span>,         <span class="hljs-comment">//时间戳，自1970年以来的秒数   </span><br>        <span class="hljs-string">&quot;nonceStr&quot;</span>:<span class="hljs-string">&quot;e61463f8efa94090b1f366cccfbbb444&quot;</span>, <span class="hljs-comment">//随机串   </span><br>        <span class="hljs-string">&quot;package&quot;</span>:<span class="hljs-string">&quot;prepay_id=u802345jgfjsdfgsdg888&quot;</span>,   <br>        <span class="hljs-string">&quot;signType&quot;</span>:<span class="hljs-string">&quot;MD5&quot;</span>,         <span class="hljs-comment">//微信签名方式：   </span><br>        <span class="hljs-string">&quot;paySign&quot;</span>:<span class="hljs-string">&quot;70EA570631E4BB79628FBCA90534C63FF7FADD89&quot;</span> <span class="hljs-comment">//微信签名 </span><br>     &#125;,<br>     <span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)&#123;<br>     <span class="hljs-keyword">if</span>(res.<span class="hljs-property">err_msg</span> == <span class="hljs-string">&quot;get_brand_wcpay_request:ok&quot;</span> )&#123;<br>     <span class="hljs-comment">// 使用以上方式判断前端返回,微信团队郑重提示：</span><br>           <span class="hljs-comment">//res.err_msg将在用户支付成功后返回ok，但并不保证它绝对可靠。</span><br>     &#125; <br>  &#125;); <br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">WeixinJSBridge</span> == <span class="hljs-string">&quot;undefined&quot;</span>)&#123;<br>  <span class="hljs-keyword">if</span>( <span class="hljs-variable language_">document</span>.<span class="hljs-property">addEventListener</span> )&#123;<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;WeixinJSBridgeReady&#x27;</span>, onBridgeReady, <span class="hljs-literal">false</span>);<br>  &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">attachEvent</span>)&#123;<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">attachEvent</span>(<span class="hljs-string">&#x27;WeixinJSBridgeReady&#x27;</span>, onBridgeReady); <br>      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">attachEvent</span>(<span class="hljs-string">&#x27;onWeixinJSBridgeReady&#x27;</span>, onBridgeReady);<br>  &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>  <span class="hljs-title function_">onBridgeReady</span>();<br>&#125;<br></code></pre></td></tr></table></figure>

<p>那后端支付的时候是需要用户的<strong>appid</strong>的那这时候我们在客户端应该如何获取呢？其实微信官方文档有很详细的解说：</p>
<p><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html">https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps&#x2F;Wechat_webpage_authorization.html</a></p>
<p>我们是要走网页授权的方式只获取appid的话可以走无感授权，如果需要获取用户详细信息则需要用户手动点击</p>
<blockquote>
<p>网页授权流程分为四步：<br>引导用户进入授权页面同意授权，获取code<br>通过code换取网页授权access_token（与基础支持中的access_token不同）<br>如果需要，开发者可以刷新网页授权access_token，避免过期<br>通过网页授权access_token和openid获取用户基本信息（支持UnionID机制）</p>
</blockquote>
<p>然后我们可以通过H5静默授权获得到唯一的<strong>code</strong>码然后传给后端，后端去拿这个<strong>code</strong>码去换取用户的<strong>appid</strong>（因为前端优有跨域），然后就可以调取我前面说的API去唤醒支付了</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>支付</tag>
      </tags>
  </entry>
  <entry>
    <title>无标题</title>
    <url>/2023/10/24/%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>测试</p>
]]></content>
  </entry>
  <entry>
    <title>Windows操作系统生成SSH密钥</title>
    <url>/2023/11/02/Windows%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%94%9F%E6%88%90SSH%E5%AF%86%E9%92%A5/</url>
    <content><![CDATA[<p><strong>在Windows上生成SSH密钥可以通过以下简单步骤：</strong></p>
<ol>
<li>创建公钥（如果在cmd窗口不可执行，请下载gitbash执行）</li>
</ol>
<figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>输入完毕后按回车，到底即可，此时 c盘——用户——用户名——.ssh文件夹 里面生成好了“id_rsa”和“id_rsa.pub”文件（<em>不一定是一样的位置，会有提示请以自己的目录为准</em>）。</li>
<li>将公钥添加到需要访问的服务器上的authorized_keys文件中。</li>
<li>使用私钥进行SSH连接。</li>
</ol>
]]></content>
      <tags>
        <tag>windowns</tag>
      </tags>
  </entry>
</search>
